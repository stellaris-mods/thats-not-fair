#
# ZZZ
# Refrain from using space_owner, if at all possible.
# It is not updated until a day has passed.
#

# Find system within borders
tnf_find_system_priority_1 = {
	random_system_within_border = {
		limit = {
			NOT = { is_same_value = ROOT.capital_scope.solar_system }
			tnf_potential_system = yes
		}
		set_star_flag = "tnf_spawn_system"
	}
}

# Within 100 distance of capital
tnf_find_system_priority_2 = {
	capital_scope = {
		random_system = {
			limit = {
				NOT = { is_same_value = PREV }
				distance = {
					source = PREV
					max_distance = 100
				}
				tnf_potential_system = yes
			}
			set_star_flag = "tnf_spawn_system"
		}
	}
}

# Nevermind, just spawn system
tnf_find_system_priority_3 = {
	capital_scope = {
		random_list = { # The initializers all set tnf_spawn_system
			1 = { spawn_system = { min_distance = 20 max_distance = 60 initializer = "tnf_init_01" } }
			1 = { spawn_system = { min_distance = 20 max_distance = 60 initializer = "tnf_init_02" } }
			1 = { spawn_system = { min_distance = 20 max_distance = 60 initializer = "tnf_init_03" } }
			1 = { spawn_system = { min_distance = 20 max_distance = 60 initializer = "tnf_init_04" } }
		}
	}
}

# Find ideal planet
tnf_find_planet_priority_1 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
			is_ideal_planet_class = {
				who = ROOT
				status = yes
			}
		}
		set_planet_flag = "folkunfair_picked"
		save_event_target_as = unfairplanet
	}
}

# Secondary planet habitability
tnf_find_planet_priority_2 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
			habitability = {
				who = ROOT.species
				value > 0.50
			}
		}
		set_planet_flag = "folkunfair_picked"
		save_event_target_as = unfairplanet
	}
}

# Tertiary planet habitability
tnf_find_planet_priority_3 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
			habitability = {
				who = ROOT.species
				value > 0.15
			}
		}
		set_planet_flag = "folkunfair_picked"
		save_event_target_as = unfairplanet
	}
}

# Any potentioal planet ?
tnf_find_planet_priority_4 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
		}
		set_planet_flag = "folkunfair_picked"
		save_event_target_as = unfairplanet
	}
}

# No potential planet, so make one.
tnf_find_planet_priority_5 = {
	log = "Spawning planet."
	random_system_planet = { save_event_target_as = tnf_spawn_planet_at }
	spawn_planet = {
		class = random_colonizable
		location = event_target:tnf_spawn_planet_at
		orbit_angle_offset = -30
		orbit_distance_offset = 20
		size = 18
		has_ring = no
		init_effect = {
			reroll_deposits = yes # ZZZ Not sure if this is necessary.
			set_planet_flag = "folkunfair_picked"
			save_event_target_as = unfairplanet
		}
	}
}

# From country scope
ensure_colonizable_planet = {
	# Step 1: Pick system
	tnf_find_system_priority_1 = yes
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_system" } } }
		log = "Locating system for [root.GetName], did not find one inside borders."
		tnf_find_system_priority_2 = yes
	}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_system" } } }
		log = "Locating system for [root.GetName], did not find one within 100 distance units."
		tnf_find_system_priority_3 = yes
	}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_system" } } }
		log = "WARNING: Locating system for [root.GetName], did not find one after forcefully spawning."
	}

	# Step 2: Pick planet
	random_system = {
		limit = { has_star_flag = "tnf_spawn_system" }
		set_star_flag = "folkunfair_picked"
		remove_star_flag = "tnf_spawn_system"

		# ZZZ any_planet{} checks within system scope
		tnf_find_planet_priority_1 = yes
		if = { limit = { NOT = { any_planet = { has_planet_flag = "folkunfair_picked" } } }
			tnf_find_planet_priority_2 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "folkunfair_picked" } } }
			tnf_find_planet_priority_3 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "folkunfair_picked" } } }
			tnf_find_planet_priority_4 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "folkunfair_picked" } } }
			tnf_find_planet_priority_5 = yes
		}
	}
}

ensure_planet_size = {
	while = {
		limit = {
			planet_size < 16
		}
		change_planet_size < 1
		random_tile = {
			random_list = {
				34 = {
					add_deposit = d_mineral_deposit
				}
				33 = {
					add_deposit = d_energy_deposit
				}
				33 = {
					add_deposit = d_farmland_deposit
				}
			}
		}
	}
}

ensure_system_clean = {
	solar_system = {
		every_fleet_in_system = {
			limit = { owner = { is_hostile = ROOT } }
			delete_fleet = THIS
		}
	}
}

unfair_colonize_planet = {
	# Ensure capital tile
	while = {
		limit = {
			NOT = { has_planet_flag = "folkunfair_foundspot" }
		}
		random_tile = {
			limit = {
				has_building = no
				has_blocker = no
				num_adjacent_tiles > 3
			}
			save_event_target_as = unfaircapitaltile
			prev = {
				set_planet_flag = "folkunfair_foundspot"
			}
		}
		if = {
			limit = {
				NOT = { has_planet_flag = "folkunfair_foundspot" }
			}
			random_tile = {
				limit = { has_blocker = yes }
				remove_blocker = yes
			}
		}
	}
	# It just clutters up the debugtooltip
	remove_planet_flag = "folkunfair_foundspot"

	# Ripped directly from empire_initializers.txt
	event_target:unfaircapitaltile = {
		set_building = "building_capital_1"
		add_deposit = d_mineral_food_deposit
		# HAXX ADDED LULZ
		every_neighboring_tile = {
			limit = { has_blocker = yes }
			remove_blocker = yes
		}
	}
	planet_event = { id = game_start.22 }
	# ZZZ game_start.23 places pops like an idiot
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
}

unfair_upgrade_homeworld = {
	# game_start.20
	clear_blockers = yes
	planet_event = { id = game_start.22 }
	# ZZZ game_start.23 places pops like an idiot
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	random_list = {
		1 = { }
		1 = {
			best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
		}
		1 = {
			best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
			best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
		}
	}
}

unfair_remove_planetmodifiers = {
	if = {
		limit = { has_modifier = "holy_planet" }
		remove_modifier = "holy_planet"
	}
	if = {
		limit = { has_planet_flag = "stone_age_primitives" }
		remove_planet_flag = "stone_age_primitives"
	}
	# Copied from events/game_start.txt 1.5.0
	if = {
		limit = { has_modifier = hazardous_weather }
		remove_modifier = hazardous_weather
	}
	if = {
		limit = { has_modifier = dangerous_wildlife }
		remove_modifier = dangerous_wildlife
	}
	if = {
		limit = { has_modifier = weak_magnetic_field }
		remove_modifier = weak_magnetic_field
	}
	if = {
		limit = { has_modifier = strong_magnetic_field }
		remove_modifier = strong_magnetic_field
	}
	if = {
		limit = { has_modifier = unstable_tectonics }
		remove_modifier = unstable_tectonics
	}
	if = {
		limit = { has_modifier = tidal_locked }
		remove_modifier = tidal_locked
	}
	if = {
		limit = { has_modifier = chthonian_planet }
		remove_modifier = chthonian_planet
	}
	if = {
		limit = { has_modifier = asteroid_impacts }
		remove_modifier = asteroid_impacts
	}
	if = {
		limit = { has_modifier = extensive_moon_system }
		remove_modifier = extensive_moon_system
	}
	if = {
		limit = { has_modifier = carbon_world }
		remove_modifier = carbon_world
	}
	if = {
		limit = { has_modifier = wild_storms }
		remove_modifier = wild_storms
	}
	if = {
		limit = { has_modifier = low_gravity }
		remove_modifier = low_gravity
	}
	if = {
		limit = { has_modifier = high_gravity }
		remove_modifier = high_gravity
	}
	#if = {
	#	limit = { has_modifier = hollow_planet }
	#	remove_modifier = hollow_planet
	#}
	if = {
		limit = { has_modifier = mineral_rich }
		remove_modifier = mineral_rich
	}
	if = {
		limit = { has_modifier = ultra_rich }
		remove_modifier = ultra_rich
	}
	if = {
		limit = { has_modifier = mineral_poor }
		remove_modifier = mineral_poor
	}
	if = {
		limit = { has_modifier = titanic_life }
		remove_modifier = titanic_life
	}
	if = {
		limit = { has_modifier = mineral_poor }
		remove_modifier = mineral_poor
	}
	if = {
		limit = { has_modifier = asteroid_belt }
		remove_modifier = asteroid_belt
	}
	if = {
		limit = { has_modifier = natural_beauty }
		remove_modifier = natural_beauty
	}
	if = {
		limit = { has_modifier = atmospheric_aphrodisiac }
		remove_modifier = atmospheric_aphrodisiac
	}
	if = {
		limit = { has_modifier = atmospheric_hallucinogen }
		remove_modifier = atmospheric_hallucinogen
	}
	if = {
		limit = { has_modifier = lush_planet }
		remove_modifier = lush_planet
	}
	if = {
		limit = { has_modifier = bleak_planet }
		remove_modifier = bleak_planet
	}
	if = {
		limit = { has_modifier = irradiated_planet }
		remove_modifier = irradiated_planet
	}
}

# All advanced AIs get spaceports on their new planets
unfair_spaceport = {
	delete_fleet = spaceport
	ROOT = {
		switch = {
			trigger = has_technology
			tech_mass_drivers_1 = {
				PREV = {
					create_spaceport = {
						owner = ROOT
						initial_module = "projectile_weapon"
					}
				}
			}
			tech_lasers_1 = {
				PREV = {
					create_spaceport = {
						owner = ROOT
						initial_module = "laser_weapon"
					}
				}
			}
			tech_missiles_1 = {
				PREV = {
					create_spaceport = {
						owner = ROOT
						initial_module = "missile_weapon"
					}
				}
			}
		}
	}
}

unfair_give_technologies = {
	# Here's what they get based on ingame inspection that is not
	# from weapon type or starting tech.
	country_event = { id = game_start.6 }

	# ALWAYS GIVE XENOLOGY BECAUSE IT SUCKS
	if = { limit = { NOT = { has_technology = "tech_alien_life_studies" } }
		give_technology = {
			tech = "tech_alien_life_studies"
			message = no
		}
	}

	if = {
		limit = {
			has_country_flag = "folkunfair_allow_edict"
		}
		# powered exoskeletons
		give_technology = {
			tech = "tech_powered_exoskeletons"
			message = no
		}

		# improved spaceport
		give_technology = {
			tech = "tech_spaceport_2"
			message = no
		}

		# geothermal fracking
		give_technology = {
			tech = "tech_mining_network_2"
			message = no
		}

		# orbital hydroponics
		give_technology = {
			tech = "tech_orbital_hydroponics"
			message = no
		}

		# eco simulation
		give_technology = {
			tech = "tech_hydroponics"
			message = no
		}

		# centralized command
		give_technology = {
			tech = "tech_centralized_command"
			message = no
		}

		# global energy management
		give_technology = {
			tech = "tech_power_hub_1"
			message = no
		}

		# Gravitic Sensors
		give_technology = {
			tech = "tech_sensors_2"
			message = no
		}

		# field modulation
		give_technology = {
			tech = "tech_power_plant_2"
			message = no
		}

		# Blocker techs
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_mountain_range" } } }
			give_technology = {
				tech = "tech_tb_mountain_range"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_active_volcano" } } }
			give_technology = {
				tech = "tech_tb_volcano"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_dense_jungle" } } }
			give_technology = {
				tech = "tech_tb_dense_jungle"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_quicksand_basin" } } }
			give_technology = {
				tech = "tech_tb_quicksand_basin"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_noxious_swamp" } } }
			give_technology = {
				tech = "tech_tb_noxious_swamp"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_massive_glacier" } } }
			give_technology = {
				tech = "tech_tb_massive_glacier"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_toxic_kelp" } } }
			give_technology = {
				tech = "tech_tb_toxic_kelp"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_deep_sinkhole" } } }
			give_technology = {
				tech = "tech_tb_deep_sinkhole"
				message = no
			}
		}
	}
}
