#
# ZZZ
# Refrain from using space_owner, if at all possible.
# It is not updated until a day has passed.
#

# Find system within borders
tnf_find_system_priority_1 = {
	random_system_within_border = {
		limit = {
			NOT = { is_same_value = ROOT.capital_scope.solar_system }
			tnf_potential_system = yes
		}
		log = "SYSTEM [this.GetName]: Found within borders."
		set_star_flag = "tnf_picked_system"
	}
}

# Within 80 distance of capital
tnf_find_system_priority_2 = {
	capital_scope = {
		random_system = {
			limit = {
				NOT = { is_same_value = PREV.solar_system }
				distance = {
					source = PREV
					max_distance = 80
				}
				tnf_potential_system = yes
			}
			log = "SYSTEM [this.GetName]: Found within 80 distance of capital."
			set_star_flag = "tnf_picked_system"
		}
	}
}

# Nevermind, just spawn system
# ZZZ Don't use random_system_within_border because our borders are not extended
# ZZZ until a day has passed ingame, I think. I have not tested this, specifically.
tnf_find_system_priority_3 = {
	# First, try to find a owned system that is fairly close to our capital
	random_owned_planet = {
		limit = {
			solar_system = {
				NOT = { has_star_flag = "tnf_spawned_from" }
				distance = { source = ROOT.capital_scope max_distance = 40 }
			}
		}
		solar_system = {
			log = "SYSTEM: Spawning on first try from [this.GetName]."
			set_star_flag = "tnf_spawn_here"
		}
	}

	# Beware, the if-statements below are nested.
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_here" } } }
		# Second, find any system that is fairly close to our capital
		random_system = {
			limit = {
				NOT = { has_star_flag = "tnf_spawned_from" }
				distance = { source = ROOT.capital_scope max_distance = 40 }
			}
			log = "SYSTEM: Spawning on second try from [this.GetName]."
			set_star_flag = "tnf_spawn_here"
		}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_here" } } }
		# Third, expand search distance from #2
		random_system = {
			limit = {
				NOT = { has_star_flag = "tnf_spawned_from" }
				distance = { source = ROOT.capital_scope max_distance = 60 }
			}
			log = "SYSTEM: Spawning on third try from [this.GetName]."
			set_star_flag = "tnf_spawn_here"
		}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_here" } } }
		# Fourth, try 40 again but just ignore the flag
		random_system = {
			limit = { distance = { source = ROOT.capital_scope max_distance = 40 } }
			log = "SYSTEM: Spawning on fourth try from [this.GetName]."
			set_star_flag = "tnf_spawn_here"
		}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_here" } } }
		# Fifth, try 60 again but just ignore the flag
		random_system = {
			limit = { distance = { source = ROOT.capital_scope max_distance = 60 } }
			log = "SYSTEM: Spawning on fifth try from [this.GetName]."
			set_star_flag = "tnf_spawn_here"
		}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_spawn_here" } } }
		# Sixth, just spawn around capital
		# The reason we only do this as a "last" resort, is because the spawn_system
		# command always "walks" in the same direction. So if we end up here
		# twice in a row, that means the systems will be directly on top of eachother.
		capital_scope = { solar_system = {
			log = "SYSTEM: Spawning on sixth try from [this.GetName]."
			set_star_flag = "tnf_spawn_here"
		} }
	} } } } }

	random_system = {
		limit = { has_star_flag = "tnf_spawn_here" }
		remove_star_flag = "tnf_spawn_here"
		set_star_flag = "tnf_spawned_from"
		random_list = { # The initializers all set tnf_picked_system
			1 = { spawn_system = { min_distance = 20 max_distance = 40 initializer = "tnf_init_01" } }
			1 = { spawn_system = { min_distance = 20 max_distance = 40 initializer = "tnf_init_02" } }
			1 = { spawn_system = { min_distance = 20 max_distance = 40 initializer = "tnf_init_03" } }
			1 = { spawn_system = { min_distance = 20 max_distance = 40 initializer = "tnf_init_04" } }
		}
	}
}

# Find ideal planet
tnf_find_planet_priority_1 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
			is_ideal_planet_class = {
				who = ROOT
				status = yes
			}
		}
		log = "PLANET [this.GetName]: Priority 1."
		set_planet_flag = "tnf_picked_planet"
	}
}

# Secondary planet habitability
tnf_find_planet_priority_2 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
			habitability = {
				who = ROOT.species
				value > 0.50
			}
		}
		log = "PLANET [this.GetName]: Priority 2."
		set_planet_flag = "tnf_picked_planet"
	}
}

# Tertiary planet habitability
tnf_find_planet_priority_3 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
			habitability = {
				who = ROOT.species
				value > 0.15
			}
		}
		log = "PLANET [this.GetName]: Priority 3."
		set_planet_flag = "tnf_picked_planet"
	}
}

# Any potentioal planet ?
tnf_find_planet_priority_4 = {
	random_system_planet = {
		limit = {
			tnf_potential_planet = yes
		}
		log = "PLANET [this.GetName]: Priority 4."
		set_planet_flag = "tnf_picked_planet"
	}
}

# No potential planet, so make one.
tnf_find_planet_priority_5 = {
	log = "PLANET: Spawning new planet in [this.GetName]."
	random_system_planet = { save_event_target_as = tnf_spawn_planet_at }
	spawn_planet = {
		class = random_colonizable
		location = event_target:tnf_spawn_planet_at
		orbit_angle_offset = -30
		orbit_distance_offset = 20
		size = { min = 16 max = 25 }
		has_ring = no
		init_effect = {
			# Using a semilarge list of names below just to try and prevent
			# any country from getting the same one twice.
			random_list = { # set_name = random does not work as of 1.8
				1 = { set_name = "NAME_The_Mistake" }
				1 = { set_name = "NAME_Tumbleweed" }
				1 = { set_name = "NAME_Unity" }
				1 = { set_name = "NAME_Thelet" }
				1 = { set_name = "NAME_Sirius" }
				1 = { set_name = "Kappa" }
				1 = { set_name = "November" }
				1 = { set_name = "Sierra" }
				1 = { set_name = "Tau" }
				1 = { set_name = "Hippos" }
				1 = { set_name = "Clowns" }
				1 = { set_name = "Bravo" }
				1 = { set_name = "Unfair" }
				1 = { set_name = "Vagabonds" }
				1 = { set_name = "Betelgeuse" }
			}
			set_planet_flag = "tnf_picked_planet"
		}
	}
}

# From country scope
ensure_colonizable_planet = {
	log = "COUNTRY [root.GetName]: Colonizing #[root.UnfairColonize]."
	# Step 1: Pick system
	tnf_find_system_priority_1 = yes
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_picked_system" } } }
		tnf_find_system_priority_2 = yes
	}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_picked_system" } } }
		tnf_find_system_priority_3 = yes
	}
	if = { limit = { NOT = { any_system = { has_star_flag = "tnf_picked_system" } } }
		log = "ERROR: Did not find any viable solar system."
	}

	# Step 2: Pick planet
	random_system = {
		limit = { has_star_flag = "tnf_picked_system" }
		set_star_flag = "tnf_ignore_system"
		remove_star_flag = "tnf_picked_system"

		# ZZZ any_planet{} checks within system scope
		tnf_find_planet_priority_1 = yes
		if = { limit = { NOT = { any_planet = { has_planet_flag = "tnf_picked_planet" } } }
			tnf_find_planet_priority_2 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "tnf_picked_planet" } } }
			tnf_find_planet_priority_3 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "tnf_picked_planet" } } }
			tnf_find_planet_priority_4 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "tnf_picked_planet" } } }
			tnf_find_planet_priority_5 = yes
		}
		if = { limit = { NOT = { any_planet = { has_planet_flag = "tnf_picked_planet" } } }
			log = "ERROR: Did not find any viable planet in [this.GetName]."
		}
		random_system_planet = {
			limit = { has_planet_flag = "tnf_picked_planet" }
			remove_planet_flag = "tnf_picked_planet"
			set_planet_flag = "tnf_ignore_planet"
			save_event_target_as = unfairplanet
		}
	}
}

tnf_random_tile_resource = {
	random_tile = {
		limit = { has_deposit = no }
		random_list = {
			50 = { } # null deposit
			15 = { add_deposit = d_mineral_deposit }
			10 = { add_deposit = d_rich_mineral_deposit }
			2  = { add_deposit = d_vast_mineral_deposit }
			1  = { add_deposit = d_immense_mineral_deposit }
			15 = { add_deposit = d_energy_deposit }
			10 = { add_deposit = d_rich_energy_deposit }
			2  = { add_deposit = d_vast_energy_deposit } # should be 1, for some reason
			1  = { add_deposit = d_immense_energy_deposit }
			15 = { add_deposit = d_farmland_deposit }
			10 = { add_deposit = d_rich_farmland_deposit }
			2  = { add_deposit = d_vast_farmland_deposit }
			1  = { add_deposit = d_immense_farmland_deposit }

			5  = { add_deposit = d_mineral_energy_deposit }
			2  = { add_deposit = d_rich_mineral_energy_deposit }
			5  = { add_deposit = d_mineral_food_deposit }
			2  = { add_deposit = d_rich_food_mineral_deposit }

			7  = { add_deposit = d_society_deposit }
			3  = { add_deposit = d_rich_society_deposit }
			2  = { add_deposit = d_vast_society_deposit }
			1  = { add_deposit = d_immense_society_deposit }

			7  = { add_deposit = d_physics_deposit } # lolwuts this should be 12
			3  = { add_deposit = d_rich_physics_deposit } # wtf this should be 5 for some reason
			2  = { add_deposit = d_vast_physics_deposit }
			1  = { add_deposit = d_immense_physics_deposit }

			7  = { add_deposit = d_engineering_deposit }
			3  = { add_deposit = d_rich_engineering_deposit }
			2  = { add_deposit = d_vast_engineering_deposit }
			1  = { add_deposit = d_immense_engineering_deposit }

			2  = { add_deposit = d_betharian_deposit }
			2  = { add_deposit = d_alien_pets_deposit }
		}
	}
}

ensure_planet_size = {
	random_list = {
		1 = {
			while = { limit = { planet_size < 16 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 17 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 18 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 19 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 20 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 21 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 22 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 23 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 24 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
		1 = {
			while = { limit = { planet_size < 25 }
				change_planet_size < 1
				tnf_random_tile_resource = yes
				tnf_random_tile_blocker = yes
			}
		}
	}
}

ensure_system_clean = {
	solar_system = {
		every_fleet_in_system = {
			limit = { owner = { is_hostile = ROOT } }
			delete_fleet = THIS
		}
	}
}

unfair_colonize_planet = {
	# Ensure capital tile
	while = {
		limit = {
			NOT = { has_planet_flag = "folkunfair_foundspot" }
		}
		random_tile = {
			limit = {
				has_building = no
				has_blocker = no
				num_adjacent_tiles > 3
			}
			save_event_target_as = unfaircapitaltile
			prev = {
				set_planet_flag = "folkunfair_foundspot"
			}
		}
		if = {
			limit = {
				NOT = { has_planet_flag = "folkunfair_foundspot" }
			}
			random_tile = {
				limit = { has_blocker = yes }
				remove_blocker = yes
			}
		}
	}
	# It just clutters up the debugtooltip
	remove_planet_flag = "folkunfair_foundspot"

	# Ripped directly from empire_initializers.txt
	event_target:unfaircapitaltile = {
		set_building = "building_capital_1"
		add_deposit = d_mineral_food_deposit
		# HAXX ADDED LULZ
		every_neighboring_tile = {
			limit = { has_blocker = yes }
			remove_blocker = yes
		}
	}
	planet_event = { id = game_start.22 }
	# ZZZ game_start.23 places pops like an idiot
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
}

unfair_upgrade_homeworld = {
	# game_start.20
	clear_blockers = yes
	planet_event = { id = game_start.22 }
	# ZZZ game_start.23 places pops like an idiot
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
	random_list = {
		1 = { }
		1 = {
			best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
		}
		1 = {
			best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
			best_tile_for_pop = { create_pop = { species = owner_main_species ethos = ROOT } }
		}
	}
}

unfair_remove_planetmodifiers = {
	if = {
		limit = { has_modifier = "holy_planet" }
		remove_modifier = "holy_planet"
	}
	if = {
		limit = { has_modifier = "chthonian_planet" }
		remove_modifier = "chthonian_planet"
	}
	if = {
		limit = { has_modifier = "extensive_moon_system" }
		remove_modifier = "extensive_moon_system"
	}
	if = {
		limit = { has_modifier = "carbon_world" }
		remove_modifier = "carbon_world"
	}
	if = {
		limit = { has_modifier = "irradiated_planet" }
		remove_modifier = "irradiated_planet"
	}
}

# All advanced AIs get spaceports on their new planets
unfair_spaceport = {
	delete_fleet = spaceport
	ROOT = {
		switch = {
			trigger = has_technology
			tech_mass_drivers_1 = {
				PREV = {
					create_spaceport = {
						owner = ROOT
						initial_module = "projectile_weapon"
					}
				}
			}
			tech_lasers_1 = {
				PREV = {
					create_spaceport = {
						owner = ROOT
						initial_module = "laser_weapon"
					}
				}
			}
			tech_missiles_1 = {
				PREV = {
					create_spaceport = {
						owner = ROOT
						initial_module = "missile_weapon"
					}
				}
			}
		}
	}
}

unfair_give_technologies = {
	# Here's what they get based on ingame inspection that is not
	# from weapon type or starting tech.
	country_event = { id = game_start.6 }

	# ALWAYS GIVE XENOLOGY BECAUSE IT SUCKS
	if = { limit = { NOT = { has_technology = "tech_alien_life_studies" } }
		give_technology = {
			tech = "tech_alien_life_studies"
			message = no
		}
	}

	if = {
		limit = {
			has_country_flag = "folkunfair_allow_edict"
		}
		# powered exoskeletons
		give_technology = {
			tech = "tech_powered_exoskeletons"
			message = no
		}

		# improved spaceport
		give_technology = {
			tech = "tech_spaceport_2"
			message = no
		}

		# geothermal fracking
		give_technology = {
			tech = "tech_mining_network_2"
			message = no
		}

		# orbital hydroponics
		give_technology = {
			tech = "tech_orbital_hydroponics"
			message = no
		}

		# eco simulation
		give_technology = {
			tech = "tech_hydroponics"
			message = no
		}

		# centralized command
		give_technology = {
			tech = "tech_centralized_command"
			message = no
		}

		# global energy management
		give_technology = {
			tech = "tech_power_hub_1"
			message = no
		}

		# Gravitic Sensors
		give_technology = {
			tech = "tech_sensors_2"
			message = no
		}

		# field modulation
		give_technology = {
			tech = "tech_power_plant_2"
			message = no
		}

		# Blocker techs
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_mountain_range" } } }
			give_technology = {
				tech = "tech_tb_mountain_range"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_active_volcano" } } }
			give_technology = {
				tech = "tech_tb_volcano"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_dense_jungle" } } }
			give_technology = {
				tech = "tech_tb_dense_jungle"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_quicksand_basin" } } }
			give_technology = {
				tech = "tech_tb_quicksand_basin"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_noxious_swamp" } } }
			give_technology = {
				tech = "tech_tb_noxious_swamp"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_massive_glacier" } } }
			give_technology = {
				tech = "tech_tb_massive_glacier"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_toxic_kelp" } } }
			give_technology = {
				tech = "tech_tb_toxic_kelp"
				message = no
			}
		}
		if = {
			limit = { any_owned_planet = { any_tile = { has_blocker = "tb_deep_sinkhole" } } }
			give_technology = {
				tech = "tech_tb_deep_sinkhole"
				message = no
			}
		}
	}
}

ensure_planet_food = {
	set_variable = { which = "TNFPlanetFood" value = 0 }
	set_variable = { which = "TNFNumPops" value = 0 }
	every_tile = {
		limit = { has_grown_pop = yes }
		# ZZZ Remember that has_resource = { type = food } on a tile with building_hydroponics_farm_1 returns 1, not 3.
		# ZZZ If there is no pop on it, obviously.
		# Too bad we can't switch on pop_produces_resource
		if = { limit = { pop = { pop_produces_resource = { type = food amount > 0 } } }
			if = { limit = { pop = { pop_produces_resource = { type = food amount > 7.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 8 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 6.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 7 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 5.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 6 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 4.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 5 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 3.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 4 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 2.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 3 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 1.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 2 } }
			else = { if = { limit = { pop = { pop_produces_resource = { type = food amount > 0.9 } } }
				PREV = { change_variable = { which = "TNFPlanetFood" value = 1 } }
			} } } } } } } } } } } } } } }
			else = {
				pop = { set_pop_flag = "tnf_can_move" }
			}
		}
		# We need to count the pops because we can't compare a trigger to a variable
		PREV = { change_variable = { which = "TNFNumPops" value = 1 } }
	}
	#
	# ZZZ Apparently after we create_pop on a tile with food,
	# ZZZ pop_produces_resource = { type = food amount = 0 } is true for that pop.
	# ZZZ But on further testing, it did update sometimes when I just repeated ensure_planet_food.
	# ZZZ It might be that using `every_tile` makes pop_produces_resource update its results.
	# ZZZ Or, it might just be that I did too few tests, and that there's some other magic.
	#
	while = {
		limit = {
			check_variable = { which = "TNFNumPops" value > 0 }
			check_variable = { which = "TNFPlanetFood" value > 0 }
			check_variable = { which = "TNFNumPops" value > "TNFPlanetFood" }
			any_tile = {
				tnf_tile_spawnable = yes
				has_resource = food
			}
			any_pop = { has_pop_flag = "tnf_can_move" }
		}
		tnf_move_pop_to_food = yes
	}

	# Dont put garbage in debugtooltips
	if = { limit = { NOT = { has_global_flag = "debug" } }
		every_owned_pop = { remove_pop_flag = "tnf_can_move" }
		set_variable = { which = "TNFNumPops" value = 0 }
		set_variable = { which = "TNFPlanetFood" value = 0 }
	}
}

tnf_move_pop_to_food = {
	# This might not actually remove any pops, if for some weird reason
	# they all produce some food. I do declare, I don't care.
	random_pop = {
		limit = { has_pop_flag = "tnf_can_move" }
		kill_pop = yes
	}
	# Try to find a tile with 4, 3, 2, and 1 food, in that order
	# d_immense_farmland_deposit, d_vast_farmland_deposit, d_rich_farmland_deposit, d_farmland_deposit
	# But we don't check for specific deposits, to be more compatible with other addons that add
	# new kinds of food deposits.
	#
	# Apparently, has_resource = { type = food amount > X } also includes any building, so a tile with
	# 1 food + building_hydroponics_farm_1 will produce 3. Which means we need to scan up to 6.
	# ZZZ But it seems that's only true if the tile has a pop.
	if = {
		limit = { any_tile = { tnf_tile_spawnable = yes has_resource = { type = food amount > 5 } } }
		random_tile = {
			limit = { tnf_tile_spawnable = yes has_resource = { type = food amount > 5 } }
			log = "PLANET [Prev.GetName]: Moved pop to tile with F>5 (P[Prev.TNFNumPops]>F[Prev.TNFPlanetFood])."
			create_pop = { species = owner_main_species ethos = ROOT }
		}
		change_variable = { which = "TNFPlanetFood" value = 6 }
	else = { if = {
		limit = { any_tile = { tnf_tile_spawnable = yes has_resource = { type = food amount > 4 } } }
		random_tile = {
			limit = { tnf_tile_spawnable = yes has_resource = { type = food amount > 4 } }
			log = "PLANET [Prev.GetName]: Moved pop to tile with F>4 (P[Prev.TNFNumPops]>F[Prev.TNFPlanetFood])."
			create_pop = { species = owner_main_species ethos = ROOT }
		}
		change_variable = { which = "TNFPlanetFood" value = 5 }
	else = { if = {
		limit = { any_tile = { tnf_tile_spawnable = yes has_resource = { type = food amount > 3 } } }
		random_tile = {
			limit = { tnf_tile_spawnable = yes has_resource = { type = food amount > 3 } }
			log = "PLANET [Prev.GetName]: Moved pop to tile with F>3 (P[Prev.TNFNumPops]>F[Prev.TNFPlanetFood])."
			create_pop = { species = owner_main_species ethos = ROOT }
		}
		change_variable = { which = "TNFPlanetFood" value = 4 }
	else = { if = {
		limit = { any_tile = { tnf_tile_spawnable = yes has_resource = { type = food amount > 2 } } }
		random_tile = {
			limit = { tnf_tile_spawnable = yes has_resource = { type = food amount > 2 } }
			log = "PLANET [Prev.GetName]: Moved pop to tile with F>2 (P[Prev.TNFNumPops]>F[Prev.TNFPlanetFood])."
			create_pop = { species = owner_main_species ethos = ROOT }
		}
		change_variable = { which = "TNFPlanetFood" value = 3 }
	else = { if = {
		limit = { any_tile = { tnf_tile_spawnable = yes has_resource = { type = food amount > 1 } } }
		random_tile = {
			limit = { tnf_tile_spawnable = yes has_resource = { type = food amount > 1 } }
			log = "PLANET [Prev.GetName]: Moved pop to tile with F>1 (P[Prev.TNFNumPops]>F[Prev.TNFPlanetFood])."
			create_pop = { species = owner_main_species ethos = ROOT }
		}
		change_variable = { which = "TNFPlanetFood" value = 2 }
	else = {
		random_tile = {
			limit = { tnf_tile_spawnable = yes has_resource = food }
			log = "PLANET [Prev.GetName]: Moved pop to tile with F=1 (P[Prev.TNFNumPops]>F[Prev.TNFPlanetFood])."
			create_pop = { species = owner_main_species ethos = ROOT }
		}
		change_variable = { which = "TNFPlanetFood" value = 1 }
	} } } } } } } } } }
}
